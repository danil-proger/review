#include <bits/stdc++.h>
#include <limits>

long long INF = std::numeric_limits<long long>::max();
std::vector<long long> input;
std::vector<long long> pos;
std::vector<long long> prev;
std::vector<long long> result;
std::vector<long long> dp;
long long n, length;

void answer()  {
    for(long long i = 1; i < n + 1; ++i) {
        long long j = (long long) (std::upper_bound(dp.begin(), dp.end(), input[i - 1]) - dp.begin());
        if (dp[j - 1] <= input[i - 1] && dp[j] >= input[i - 1]) {
            dp[j] = input[i - 1];
            pos[j] = i - 1;
            prev[i - 1] = pos[j - 1];
            if(length < j) {
                length = j;
            }
        }
    }
    long long index = pos[length];
    while (index != -1) {
        result.push_back(index);
        index = prev[index];
    }

    std::cout << length << '\n';
    for (long long i : result) {
        std::cout << n - i << " ";
    }
}

int main() {
    std::cin >> n;
    input.resize(n);
    pos.resize(n + 1);
    prev.resize(n, -1);
    dp.resize(n + 1);// dp[i] - конец не возрастающей подпоследовательности с длиной dp[i]
                             // d[i] = max(d[j] + 1) , j = 0, 1 .... i - 1
    pos[0] = -1;
    length = 0;

    for(long long i = 0; i < n; ++i) {
        std::cin >> input[i];
    }

    std::reverse(input.begin(), input.end());
    for(long long i = 1; i < n + 1; ++i) {
        dp[i] = INF;
    }

    dp[0] = -INF;
    answer();

}
