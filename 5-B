#include <bits/stdc++.h>
#include <limits>

long long INF = std::numeric_limits<long long>::max();

std::vector<long long> subsequence(long long n, std::vector<long long> input, long long length, std::vector<long long> result)  {
    std::vector<long long> pos(n + 1);
    std::vector<long long> prev(n, -1);
    std::vector<long long> dp(n + 1);
    //dp[i] - это число, которое является концом не возрастающей подпоследовательности с длиной i. dp[i] является наименьшим возможным
    pos[0] = -1;
    for(long long i = 1; i < n + 1; ++i) {
        dp[i] = INF;
    }

    dp[0] = -INF;
    for(long long i = 1; i < n + 1; ++i) {
        long long j = (long long) (std::upper_bound(dp.begin(), dp.end(), input[i - 1]) - dp.begin());
        if (dp[j - 1] <= input[i - 1] && dp[j] >= input[i - 1]) {
            dp[j] = input[i - 1];
            pos[j] = i - 1;
            prev[i - 1] = pos[j - 1];
            if(length < j) {
                length = j;
            }
        }
    }
    long long index = pos[length];
    while (index != -1) {
        result.push_back(index);
        index = prev[index];
    }

    result.push_back(length);
    return result;

}

int main() {
    long long n;
    std::cin >> n;
    std::vector<long long> input(n);
    long long length = 0;
    std::vector<long long> result;

    for(long long i = 0; i < n; ++i) {
        std::cin >> input[i];
    }

    std::reverse(input.begin(), input.end());
    std::vector<long long> ans = subsequence(n, input, length, result);
    std::cout << ans[ans.size() - 1] << '\n';
    for (size_t i = 0; i < ans.size() - 1; ++i) {
        std::cout << n - ans[i] << " ";
    }

}
